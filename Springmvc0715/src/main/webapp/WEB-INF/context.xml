<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 기존의 빈을 일일이 등록하는 방식은 너무 많은 코드가 작성되므로
	가급적 빈 등록을 적게하는 방법.. -->
	
	<!-- 앞으로는 Spring이 지원하는 데이터 연동 기술을 사용하기 때문에, DB커넥션등은 우리가 직접 취득하지 않고
	Spring에게 주도권을 준다.. 그래야 이 커넥션으로 트랜잭션 등을 지원받을 수 있다.. -->
	<!-- JNDi로부터 datasource 얻어오기 -->
	<jee:jndi-lookup 
		id="dataSource"
		jndi-name="jndi/oracle"
		resource-ref="true"/>
		
	<!-- 개발자는 자신이 사용할 데이터베이스 연동 기술을 선택해서 등록해야 한다
	jdbc기반으로 개발할지? Mybatis로 개발할지? 하이버네이트, JPA등등등
	위 기술에 따라 트랜잭션 구현 객체가 달라진다.
	JDBC : DataSourceTransactionManager
	Mybatis : DataSourceTransactionManager
	Hibernate : HibernateTransactionManager
	 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="dataSourceTransactionManager"
	p:dataSource-ref="dataSource"/>
	
	<!-- SqlSession을 얻을 수 있는 팩토리인 SqlSessionFactory -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean"
	p:dataSource-ref="dataSource"
	p:configLocation="classpath:com/koreait/springmvc0715/model/mybatis/config.xml"/>
	
	<!-- DAO에게 주입할 SqlSessionTemplet을 등록 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>
	<!-- 핸들러 매핑 결정짓기
		핸들러매핑 중 Default..는 디폴트이기에 개발자가 명시하지 않으면 기본적으로 적용된다.
		이 핸들러매핑은 어떤 요청에 어떤 동생 하위컨트롤러가 일할지 여부를, 해당클래스의 어노테이션을 분석하여 결정짓는다
		
	 -->
	 <!-- 컨트롤러에 대한 일괄등록처리 -->
	 	<context:component-scan base-package="com.koreait.springmvc0715"></context:component-scan>
	 
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="viewResolver"
			p:prefix="/"
			p:suffix=".jsp"/>

</beans>
